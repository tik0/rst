SET_PROPERTY(GLOBAL APPEND PROPERTY ENABLED_FEATURES "cpp binding")

INCLUDE(PedanticCompilerWarnings)
INCLUDE(InstallFilesRecursive)

SET(STABLE_NAME "rst")
SET(STABLE_LIBRARY_NAME "${STABLE_NAME}${VERSION_SUFFIX}")
SET(SANDBOX_NAME "rstsandbox")
SET(SANDBOX_LIBRARY_NAME "${SANDBOX_NAME}${VERSION_SUFFIX}")
SET(DEPRECATED_NAME "rstdeprecated")
SET(DEPRECATED_LIBRARY_NAME "${DEPRECATED_NAME}${VERSION_SUFFIX}")
SET(SO_VERSION "${RST_VERSION_MAJOR}.${RST_VERSION_MINOR}")

INCLUDE_DIRECTORIES(BEFORE SYSTEM ${PROTOBUF_INCLUDE_DIRS})

FIND_PACKAGE(Threads REQUIRED)
INCLUDE(ParseArguments)
FUNCTION(BUILD_CPP_DOMAIN)

    # parse arguments
    PARSE_ARGUMENTS(ARG "USE_DOMAINS;ADD_CPP;ADD_H" "" ${ARGN})
    STRING(TOLOWER "${ARG_DEFAULT_ARGS}" MY_NAME_LOWER)
    STRING(TOUPPER "${ARG_DEFAULT_ARGS}" MY_NAME_UPPER)
    SET(USE_DOMAINS_LOWER)
    SET(USE_DOMAINS_UPPER)
    FOREACH(USE_DOMAIN ${ARG_USE_DOMAINS})
        STRING(TOLOWER "${USE_DOMAIN}" L)
        LIST(APPEND USE_DOMAINS_LOWER "${L}")
        STRING(TOUPPER "${USE_DOMAIN}" U)
        LIST(APPEND USE_DOMAINS_UPPER "${U}")
    ENDFOREACH()

    # generate correct include directories
    INCLUDE_DIRECTORIES(BEFORE ${CMAKE_CURRENT_BINARY_DIR})
    FOREACH(DOMAIN ${USE_DOMAINS_LOWER})
        INCLUDE_DIRECTORIES(BEFORE "${CMAKE_CURRENT_BINARY_DIR}/../${DOMAIN}")
    ENDFOREACH()

    # get export symbols right
    IF(WIN32)
        ADD_DEFINITIONS("/D${CMAKE_PROJECT_NAME}${MY_NAME_UPPER}_EXPORT=__declspec(dllexport)")
    ELSE()
        ADD_DEFINITIONS("-D${CMAKE_PROJECT_NAME}${MY_NAME_UPPER}_EXPORT=")
    ENDIF()
    FOREACH(DOMAIN ${USE_DOMAINS_UPPER})
        IF(WIN32)
            ADD_DEFINITIONS("/D${CMAKE_PROJECT_NAME}${DOMAIN}_EXPORT=__declspec(dllimport)")
        ELSE()
            ADD_DEFINITIONS("-D${CMAKE_PROJECT_NAME}${DOMAIN}_EXPORT=")
        ENDIF()
    ENDFOREACH()

    # generate the protocol
    SET(INCLUDE_ARG)
    SET(UPSTREAM_DOMAIN_TARGETS)
    LIST(LENGTH USE_DOMAINS_UPPER HAS_USE_DOMAINS)
    IF(${HAS_USE_DOMAINS} GREATER 0)
        SET(INCLUDE_ARG "INCLUDES")
        FOREACH(DOMAIN ${USE_DOMAINS_UPPER})
            LIST(APPEND INCLUDE_ARG ${${DOMAIN}_ROOT})
            STRING(TOLOWER "${DOMAIN}" LOWER_DOMAIN)
            LIST(APPEND UPSTREAM_DOMAIN_TARGETS "${LOWER_DOMAIN}_protos")
        ENDFOREACH()
    ENDIF()
    PROTOBUF_GENERATE(CPP CPP_SOURCES CPP_HEADERS
                      EXPORT_MACRO "${CMAKE_PROJECT_NAME}${MY_NAME_UPPER}_EXPORT"
                      PROTOFILES ${${MY_NAME_UPPER}_PROTOS}
                      PROTOROOT ${${MY_NAME_UPPER}_ROOT}
                      ${INCLUDE_ARG}
                      DEPENDS "${MY_NAME_LOWER}_protos" ${UPSTREAM_DOMAIN_TARGETS}
                      OUTPATH ${CMAKE_CURRENT_BINARY_DIR})

    # declare the library
    ADD_LIBRARY(${${MY_NAME_UPPER}_LIBRARY_NAME} SHARED
                ${CPP_SOURCES} ${CPP_HEADERS} ${ARG_ADD_CPP} ${ARG_ADD_H})
    FOREACH(DOMAIN ${USE_DOMAINS_UPPER})
        TARGET_LINK_LIBRARIES(${${MY_NAME_UPPER}_LIBRARY_NAME} ${${DOMAIN}_LIBRARY_NAME})
    ENDFOREACH()
    TARGET_LINK_LIBRARIES(${${MY_NAME_UPPER}_LIBRARY_NAME}
                          ${PROTOBUF_LIBRARIES}
                          ${CMAKE_THREAD_LIBS_INIT})
    SET_TARGET_PROPERTIES(${${MY_NAME_UPPER}_LIBRARY_NAME}
                          PROPERTIES
                          VERSION ${SO_VERSION})
    INSTALL(TARGETS ${${MY_NAME_UPPER}_LIBRARY_NAME}
            EXPORT "${CMAKE_PROJECT_NAME}Depends"
            ARCHIVE DESTINATION lib
            LIBRARY DESTINATION lib
            RUNTIME DESTINATION bin)

    INSTALL_FILES_RECURSIVE("include/${INSTALL_PREFIX}/${MY_NAME_LOWER}/"
                            CPP_HEADERS)
    INSTALL_FILES_RECURSIVE("include/${INSTALL_PREFIX}/${MY_NAME_LOWER}/"
                            ARG_ADD_H)

ENDFUNCTION()

ADD_SUBDIRECTORY(stable)
ADD_SUBDIRECTORY(sandbox)
ADD_SUBDIRECTORY(deprecated)

# --- decide on export macros for config files ---

IF(WIN32)
    SET(RST_CFLAGS "/DRSTSTABLE_EXPORT=__declspec(dllimport)")
    SET(RSTSANDBOX_CFLAGS "/DRSTSANDBOX_EXPORT=__declspec(dllimport)")
    SET(RSTDEPRECATED_CFLAGS "/DRSTDEPRECATED_EXPORT=__declspec(dllimport)")
ELSE()
    SET(RST_CFLAGS "-DRSTSTABLE_EXPORT=")
    SET(RSTSANDBOX_CFLAGS "-DRSTSANDBOX_EXPORT=")
    SET(RSTDEPRECATED_CFLAGS "-DRSTDEPRECATED_EXPORT=")
ENDIF()

# --- user options ---

OPTION(EXPORT_TO_CMAKE_PAKAGE_REGISTRY "If set to ON, ${CMAKE_PROJECT_NAME} will be exported to the CMake user package registry so that downstream projects automatically find the workspace location in find_package calls." OFF)

# --- pkgconfig files ---

CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/${STABLE_NAME}.pc.in"
               "${CMAKE_CURRENT_BINARY_DIR}/${STABLE_NAME}${VERSION_SUFFIX}.pc"
               @ONLY)
CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/${SANDBOX_NAME}.pc.in"
               "${CMAKE_CURRENT_BINARY_DIR}/${SANDBOX_NAME}${VERSION_SUFFIX}.pc"
               @ONLY)
CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/${DEPRECATED_NAME}.pc.in"
               "${CMAKE_CURRENT_BINARY_DIR}/${DEPRECATED_NAME}${VERSION_SUFFIX}.pc"
               @ONLY)
INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/${STABLE_NAME}${VERSION_SUFFIX}.pc"
              "${CMAKE_CURRENT_BINARY_DIR}/${SANDBOX_NAME}${VERSION_SUFFIX}.pc"
              "${CMAKE_CURRENT_BINARY_DIR}/${DEPRECATED_NAME}${VERSION_SUFFIX}.pc"
        DESTINATION lib/pkgconfig)

# --- cmake export ---

IF(EXPORT_TO_CMAKE_PAKAGE_REGISTRY)
    MESSAGE(STATUS "Exported ${CMAKE_PROJECT_NAME} to CMake package registry")
    EXPORT(PACKAGE "${CMAKE_PROJECT_NAME}")
ENDIF()

CONFIGURE_FILE("${CMAKE_PROJECT_NAME}BuildTreeSettings.cmake.in"
               "${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_PROJECT_NAME}BuildTreeSettings.cmake"
               @ONLY)

FILE(TO_CMAKE_PATH "${RSC_DIR}" RSC_DIR)
FILE(TO_CMAKE_PATH "${PROTOBUF_ROOT}" PROTOBUF_ROOT)
CONFIGURE_FILE("${CMAKE_PROJECT_NAME}Config.cmake.in"
               "${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_PROJECT_NAME}Config.cmake"
               @ONLY)
INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_PROJECT_NAME}Config.cmake"
        DESTINATION "share/${INSTALL_PREFIX}")
CONFIGURE_FILE("${CMAKE_PROJECT_NAME}ConfigVersion.cmake.in"
               "${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_PROJECT_NAME}ConfigVersion.cmake"
               @ONLY)
INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_PROJECT_NAME}ConfigVersion.cmake"
        DESTINATION "share/${INSTALL_PREFIX}")

EXPORT(TARGETS ${STABLE_LIBRARY_NAME} ${SANDBOX_LIBRARY_NAME}
       FILE "${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_PROJECT_NAME}Depends.cmake")
INSTALL(EXPORT "${CMAKE_PROJECT_NAME}Depends"
        DESTINATION "share/${INSTALL_PREFIX}")
