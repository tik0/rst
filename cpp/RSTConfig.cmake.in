GET_FILENAME_COMPONENT(@CMAKE_PROJECT_NAME@_CONFIG_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)

# interface to raw protocol files

SET(STABLE_PROTOS_REL @STABLE_PROTOS_REL@)
SET(STABLE_PACKAGES_REL @STABLE_PACKAGES_REL@)
SET(SANDBOX_PROTOS_REL @SANDBOX_PROTOS_REL@)
SET(SANDBOX_PACKAGES_REL @SANDBOX_PACKAGES_REL@)
SET(DEPRECATED_PROTOS_REL @DEPRECATED_PROTOS_REL@)
SET(DEPRECATED_PACKAGES_REL @DEPRECATED_PACKAGES_REL@)

FOREACH(DOMAIN stable sandbox deprecated)
    STRING(TOUPPER ${DOMAIN} DOMAIN_UPPER)

    SET(@CMAKE_PROJECT_NAME@_${DOMAIN_UPPER}_PROTO_ROOT "${@CMAKE_PROJECT_NAME@_CONFIG_DIR}/proto/${DOMAIN}")

    # Ordinary message description files.
    SET(@CMAKE_PROJECT_NAME@_${DOMAIN_UPPER}_PROTOS)
    FOREACH(F ${${DOMAIN_UPPER}_PROTOS_REL})
        LIST(APPEND @CMAKE_PROJECT_NAME@_${DOMAIN_UPPER}_PROTOS "${@CMAKE_PROJECT_NAME@_CONFIG_DIR}/${F}")
    ENDFOREACH()

    # Package description files.
    SET(@CMAKE_PROJECT_NAME@_${DOMAIN_UPPER}_PACKAGES)
    FOREACH(F ${${DOMAIN_UPPER}_PACKAGES_REL})
        LIST(APPEND @CMAKE_PROJECT_NAME@_${DOMAIN_UPPER}_PACKAGES "${@CMAKE_PROJECT_NAME@_CONFIG_DIR}/${F}")
    ENDFOREACH()

ENDFOREACH()

# determine whether the sandbox is required
SET(USE_SANDBOX FALSE)
SET(USE_DEPRECATED FALSE)
FOREACH(COMPONENT ${@CMAKE_PROJECT_NAME@_FIND_COMPONENTS})
    IF(COMPONENT STREQUAL "sandbox")
        SET(USE_SANDBOX TRUE)
    ELSEIF(COMPONENT STREQUAL "deprecated")
        # deprecated implies sandbox because deprecated can contain also types
        # from sandbox
        SET(USE_SANDBOX TRUE)
        SET(USE_DEPRECATED TRUE)
    ELSE()
        MESSAGE(SEND_ERROR "Unknown component ${COMPONENT} requested")
    ENDIF()
ENDFOREACH()


IF(EXISTS "${@CMAKE_PROJECT_NAME@_CONFIG_DIR}/../CMakeCache.txt")
    INCLUDE("${@CMAKE_PROJECT_NAME@_CONFIG_DIR}/@CMAKE_PROJECT_NAME@BuildTreeSettings.cmake")
ELSE()

    SET(@CMAKE_PROJECT_NAME@_INCLUDE_DIRS "${@CMAKE_PROJECT_NAME@_CONFIG_DIR}/../../include/@INSTALL_PREFIX@/stable")
    SET(@CMAKE_PROJECT_NAME@_RUNTIME_LIBRARY_DIRS "${@CMAKE_PROJECT_NAME@_CONFIG_DIR}/../../bin")

    # sandbox additions
    IF(USE_SANDBOX)
        LIST(APPEND @CMAKE_PROJECT_NAME@_INCLUDE_DIRS "${@CMAKE_PROJECT_NAME@_CONFIG_DIR}/../../include/@INSTALL_PREFIX@/sandbox")
    ENDIF()
    # deprecated additions
    IF(USE_DEPRECATED)
        LIST(APPEND @CMAKE_PROJECT_NAME@_INCLUDE_DIRS "${@CMAKE_PROJECT_NAME@_CONFIG_DIR}/../../include/@INSTALL_PREFIX@/deprecated")
    ENDIF()

ENDIF()

SET(RSC-CMake_DIR "@RSC-CMakeRSC_DIR@" CACHE PATH "RSC-CMake location")
FIND_PACKAGE(RSC-CMake REQUIRED)
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${RSC_CMAKE_MODULE_PATH}")

SET(PROTOBUF_ROOT "@PROTOBUF_ROOT@" CACHE PATH "Protobuf location")
FIND_PACKAGE(ProtocolBuffers REQUIRED)
IF(NOT PROTOBUF_LIBRARY)
    MESSAGE(FATAL_ERROR "protobuf library not found")
ENDIF()

LIST(APPEND @CMAKE_PROJECT_NAME@_INCLUDE_DIRS ${PROTOBUF_INCLUDE_DIR})
LIST(APPEND @CMAKE_PROJECT_NAME@_RUNTIME_LIBRARY_DIRS ${PROTOBUF_RUNTIME_LIBRARY_DIRS})

# Expose RST library as an imported target (from the point of view
# of the downstream project)
IF(NOT @CMAKE_PROJECT_NAME@_CONFIG_PROCESSED)
    SET(@CMAKE_PROJECT_NAME@_CONFIG_PROCESSED TRUE)
    INCLUDE("${@CMAKE_PROJECT_NAME@_CONFIG_DIR}/@CMAKE_PROJECT_NAME@Depends.cmake")
ENDIF()
SET(@CMAKE_PROJECT_NAME@_LIBRARIES @STABLE_LIBRARY_NAME@)
SET(@CMAKE_PROJECT_NAME@_CFLAGS "@RST_CFLAGS@")

# invariant sandbox additions
IF(USE_SANDBOX)
    LIST(APPEND @CMAKE_PROJECT_NAME@_LIBRARIES "@SANDBOX_LIBRARY_NAME@")
    LIST(APPEND @CMAKE_PROJECT_NAME@_CFLAGS "@RSTSANDBOX_CFLAGS@")
ENDIF()
# invariant deprecated additions
IF(USE_DEPRECATED)
    LIST(APPEND @CMAKE_PROJECT_NAME@_LIBRARIES "@DEPRECATED_LIBRARY_NAME@")
    LIST(APPEND @CMAKE_PROJECT_NAME@_CFLAGS "@RSTDEPRECATED_CFLAGS@")
ENDIF()
