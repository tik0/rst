package rst.communicationpatterns;

option java_outer_classname = "TaskStateType";

message TaskState {
    enum State {
        // Initial task submission:
        // Applicable in states: none (since initial submission)
        // Client submits specification with INITIATED state
        // Server accepts or rejects task and publishes specification with
        // ACCEPTED or REJECTED state accordingly.
        INITIATED                = 0;
        ACCEPTED                 = 1;
        REJECTED                 = 2;

        // Updated of an accepted task:
        // Applicable in states: ACCEPTED
        // Client publishes (modified) specification with UPDATE state.
        // Server accepts or rejects the update and publishes
        // specification with ACCEPTED or UPDATE_REJECTED state
        // accordingly.
        UPDATE             = 3;
        UPDATE_REJECTED    = 4;

        // Aborting an accepted task:
        // Applicable in states: ACCEPTED
        ABORT                = 5;
        ABORTED              = 6;
        ABORT_FAILED         = 7;

        // Final states.
        RESULT_AVAILABLE = 8;
        COMPLETED        = 9;
        FAILED           = 10;
    }

    enum Origin {
        SUBMITTER = 0;
        HANDLER   = 1;
    }

    required Origin origin         = 1;
    required State    state        = 2;
    required uint32 serial         = 3;

    // Payload blob and its type. These are intended to be processed by
    // a (de)serialization mechanism that decodes/encodes the payload
    // blob according to the type information in wireSchema.
    required bytes    wire_schema = 4;
    required bytes    payload     = 5;
}
